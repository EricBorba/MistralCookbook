# -*- coding: utf-8 -*-
"""Multi-Agent Workflow for Comprehensive Earnings Call Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v2sy7m2O0oNTt6DjIPmLupyy29cn1yWE

# Multi-Agent Workflow for Comprehensive Earnings Call Analysis

<a href="https://colab.research.google.com/github/mistralai/cookbook/blob/main/mistral/agents/earnings_calls/Multi_Agent_Workflow_for_Comprehensive_Earnings_Call_Analysis.ipynb.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

Companies earnings calls provide critical insights into a company's performance, strategy, and future outlook. However, these transcripts are lengthy, dense, and cover diverse topics - making it challenging to extract targeted insights efficiently.

## The Problem

- Analysts must manually sift through pages of text to find relevant information
- Different stakeholders need different insights from the same transcript
- Cross-quarter comparisons require tracking evolving narratives across multiple calls
- Important nuances in tone, risk factors, and competitive positioning are easily missed

## Why This Matters

For investors, analysts, and businesses, properly analyzing earnings calls can reveal:
- Financial performance beyond the headline numbers
- Strategic shifts and emerging priorities
- Management sentiment and confidence levels
- Potential risks and competitive threats

## Our Solution

We've developed a specialized multi-agent workflow that:
1. Processes earnings call transcripts using domain-specific agents
2. Extracts structured insights across various dimensions
3. Enables targeted queries about specific aspects of the calls
4. Identifies trends and changes across multiple quarters

## Specialized Agents

We employ five specialized agents, each focused on a specific analysis domain:

### Financial Agent
Extracts key metrics, growth rates, and financial guidance to provide a quantitative performance snapshot.

### Strategic Agent
Identifies product roadmaps, market expansions, and long-term initiatives to reveal company direction.

### Sentiment Agent
Analyzes tone and confidence levels across different topics to gauge management outlook.

### Risk Agent
Detects challenges, uncertainties, and potential issues, scoring their severity.

### Competitor Agent
Tracks competitive positioning, market share discussions, and responses to industry threats.

Additionally, a Temporal Analysis Agent works across quarters to identify trends, shifts, and evolving patterns.

## Workflow Orchestrator

The Orchestrator serves as the central coordinator:
1. Analyzes user queries to determine which quarters and agents are needed
2. Activates only the relevant transcript-agent combinations
3. Consolidates insights across selected agents and quarters
4. Generates comprehensive responses targeted to the specific question

This selective approach ensures efficiency by enabling users to quickly access precise information without manually reading entire transcripts while still maintaining comprehensive analysis across multiple dimensions and capturing the context and nuance of the original discussions.

## Dataset

For demonstration purposes, we use NVIDIA's quarterly earnings call transcripts from 2025:

- Q1 2025 Earnings Call Transcript
- Q2 2025 Earnings Call Transcript
- Q3 2025 Earnings Call Transcript
- Q4 2025 Earnings Call Transcript

These transcripts contain discussions of financial results, strategic initiatives, market conditions, and forward-looking statements by NVIDIA's management team and their interactions with financial analysts.

## Mistral AI Models

For our implementation, we use Mistral AI's LLMs:

`mistral-small-latest`: Used for general analysis and response generation.

`mistral-large-latest`: Used for structured output generation.

`mistral-ocr-latest`: Used for PDF transcript extraction and processing.

[![3xAvXcl.md.png](https://iili.io/3xAvXcl.md.png)](https://freeimage.host/i/3xAvXcl)

### Installation

We need `mistralai` for LLM usage.
"""

!pip install mistralai

"""### Imports"""

import os
from typing import List, Dict, Any, Literal, Optional, Union
from pydantic import BaseModel, Field
from abc import ABC, abstractmethod

from mistralai import Mistral

"""### Setup API Keys

Here we setup MistralAI API key.
"""

import os

os.environ['MISTRAL_API_KEY'] = '<YOUR MISTRALAI API KEY>' # Get your API key from https://console.mistral.ai/api-keys/

"""### Initialize Mistral client

Here we initialise Mistral client.
"""

client = Mistral(api_key=os.environ.get("MISTRAL_API_KEY"))

"""### Initiate Models

1. DEFAULT_MODEL - For General Analysis

2. STRUCTURED_MODEL - For Structured Outputs

3. OCR_MODEL - For parsing the earnings call document.
"""

DEFAULT_MODEL = "mistral-small-latest"
STRUCTURED_MODEL = "mistral-large-latest"
OCR_MODEL = "mistral-ocr-latest"

"""#### Data Models with Pydantic

Our analysis workflow uses several Pydantic models to maintain structured data:

#### Query Analysis Model
Determines which quarters and agents are needed based on user queries, including whether temporal analysis is required.

#### Agent Insight Models
- **Financial Insights**: Captures metrics, values, and confidence scores for financial performance data.
- **Strategic Insights**: Structures initiatives, descriptions, timeframes, and importance ratings for business strategies.
- **Sentiment Insights**: Records topics, sentiment classifications, supporting evidence, and speaker information.
- **Risk Insights**: Organizes risk factors, potential impacts, mitigation approaches, and severity ratings.
- **Competitor Insights**: Tracks competitive positioning across market segments with attribution information.
- **Temporal Insights**: Identifies trends across quarters with supporting evidence and pattern classifications.

#### Response Wrapper Models
Each insight type has a corresponding wrapper model to properly structure API responses, ensuring compatibility with Mistral's parsing capabilities.

#### Consolidated Response Model
Packages the final analysis results with a summary, key insights, quarterly findings, and identified trends to provide a comprehensive answer to the user's query.

These models create a consistent data schema throughout the analysis pipeline, enabling reliable extraction, comparison, and consolidation of insights.

##### Query Analysis
"""

class QueryAnalysis(BaseModel):
    """Analysis of user query to determine required components"""
    quarters: List[str] = Field(description="List of quarters to analyze it should be strictly one or more values from ['Q1', 'Q2', 'Q3', 'Q4'])")
    agent_types: List[str] = Field(description="List of agent types to use and it should be strictly one or more values from ['Financial', 'Strategic', 'Sentiment', 'Risk', 'Competitor'])")
    temporal_analysis_required: bool = Field(description="Whether temporal analysis across quarters is needed")
    query_intent: str = Field(description="Brief description of user's intent")

"""##### Financial Insights"""

class FinancialInsight(BaseModel):
    """Financial insights extracted from transcript"""
    metric_name: str
    value: Optional[str]
    context: str
    quarter: str
    confidence: float = Field(description="confidence values with limits ge=0.0, le=1.0")

class FinancialInsightsResponse(BaseModel):
    """Wrapper for list of financial insights"""
    insights: List[FinancialInsight]

"""##### Strategic Insights"""

class StrategicInsight(BaseModel):
    """Strategic insights about business direction"""
    initiative: str
    description: str
    timeframe: Optional[str]
    quarter: str
    importance: int = Field(description="confidence values with limits ge=1, le=5")

class StrategicInsightsResponse(BaseModel):
    """Wrapper for list of strategic insights"""
    insights: List[StrategicInsight]

"""##### Sentiment Insights"""

class SentimentInsight(BaseModel):
    """Insights about management sentiment"""
    topic: str
    sentiment: Literal["very negative", "negative", "neutral", "positive", "very positive"]
    evidence: str
    speaker: str
    quarter: str

class SentimentInsightsResponse(BaseModel):
    """Wrapper for list of sentiment insights"""
    insights: List[SentimentInsight]

"""Risk Insights"""

class RiskInsight(BaseModel):
    """Identified risks or challenges"""
    risk_factor: str
    description: str
    potential_impact: str
    mitigation_mentioned: Optional[str]
    quarter: str
    severity: int = Field(description="confidence values with limits ge=1, le=5")

class RiskInsightsResponse(BaseModel):
    """Wrapper for list of risk insights"""
    insights: List[RiskInsight]

"""##### Competitor Insights"""

class CompetitorInsight(BaseModel):
    """Insights about competitive positioning"""
    competitor: Optional[str]
    market_segment: str
    positioning: str
    quarter: str
    mentioned_by: str

class CompetitorInsightsResponse(BaseModel):
    """Wrapper for list of competitor insights"""
    insights: List[CompetitorInsight]

"""Temporal Insights"""

class TemporalInsight(BaseModel):
    """Insights about trends across quarters"""
    trend_type: Literal["growth", "decline", "stable", "volatile", "emerging", "fading"]
    topic: str
    description: str
    quarters_observed: List[str]
    supporting_evidence: str

class TemporalInsightsResponse(BaseModel):
    """Wrapper for list of temporal insights"""
    insights: List[TemporalInsight]

"""##### Consolidated Response Model"""

class ConsolidatedResponse(BaseModel):
    """Final response to user query"""
    summary: str
    key_insights: List[str]
    quarterly_findings: Dict[str, List[str]]
    trends_identified: Optional[List[str]]

"""### Query Processor

The Query Processor analyzes user questions to determine the specific components needed:

- Interprets natural language queries about NVIDIA's earnings calls
- Identifies which quarters (Q1-Q4) are relevant to the question
- Determines which agent types should be activated based on query content
- Decides whether temporal analysis across quarters is required
- Provides a clear interpretation of the user's intent

This component ensures the workflow activates only the necessary analysis paths, improving efficiency while maintaining comprehensive answers.
"""

class QueryProcessor:
    """Processes user queries to determine workflow requirements"""

    @staticmethod
    def analyze_query(query: str) -> QueryAnalysis:
        """Analyze user query to determine required components"""
        system_prompt = """
        You are a query analyzer for NVIDIA earnings call transcripts.
        Extract key information about which quarters and agent types are needed.
        """

        response = client.chat.parse(
            model=STRUCTURED_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Analyze this query: {query}"}
            ],
            response_format=QueryAnalysis,
            temperature=0
        )

        return response.choices[0].message.content

"""### PDF Parser

Our PDF parser leverages Mistral's OCR capabilities to extract high-quality text from earnings call transcripts while implementing a file-based caching system to improve performance. This approach enables accurate text extraction with minimal processing overhead for repeated analyses.
"""

from pathlib import Path
import hashlib

class PDFParser:
    """Parse a transcriot PDF file and extract text from all pages using Mistral OCR."""

    CACHE_DIR = Path("transcript_cache")

    @staticmethod
    def _ensure_cache_dir():
        """Make sure cache directory exists"""
        PDFParser.CACHE_DIR.mkdir(exist_ok=True)

    @staticmethod
    def _get_cache_path(file_path: str) -> Path:
        """Get the path for a cached transcript file"""
        # Create a hash of the file path to use as the cache filename
        file_hash = hashlib.md5(file_path.encode()).hexdigest()
        return PDFParser.CACHE_DIR / f"{file_hash}.txt"

    @staticmethod
    def read_transcript(file_path: str) -> str:
        """Extract text from PDF transcript"""

        mistral_client = Mistral(api_key=os.environ.get("MISTRAL_API_KEY"))

        uploaded_pdf = mistral_client.files.upload(
            file={
                "file_name": file_path,
                "content": open(file_path, "rb"),
            },
            purpose="ocr"
        )

        signed_url = mistral_client.files.get_signed_url(file_id=uploaded_pdf.id)

        ocr_response = mistral_client.ocr.process(
            model=OCR_MODEL,
            document={
                "type": "document_url",
                "document_url": signed_url.url,
            }
        )

        text = "\n".join([x.markdown for x in (ocr_response.pages)])

        return text

    @staticmethod
    def get_transcript_by_quarter(quarter: str, year: str = "2025") -> str:
        """Get the transcript for a specific quarter"""

        file_path = f"nvda_earnings_{year}_{quarter}.pdf"

        PDFParser._ensure_cache_dir()

        cache_path = PDFParser._get_cache_path(file_path)

        # Check if transcript is in cache
        if cache_path.exists():
            print(f"Using cached transcript for {year} {quarter}")
            with open(cache_path, "r", encoding="utf-8") as f:
                return f.read()
        else:
            transcript = PDFParser.read_transcript(file_path)
            # Store in cache for future use
            with open(cache_path, "w", encoding="utf-8") as f:
                f.write(transcript)
            print(f"Cached transcript for {year} {quarter}")

            return transcript

"""### Specialised Agents

Our analysis relies on five domain-focused agents, each extracting specific insights:

**Financial Agent** - Analyzes metrics, revenue figures, margins, and growth rates.

**Strategic Agent** - Identifies product roadmaps, market expansions, and R&D investments.

**Sentiment Agent** - Evaluates management tone, confidence levels, and enthusiasm across topics.

**Risk Agent** - Detects challenges, uncertainties, and potential threats with severity ratings.

**Competitor Agent** - Tracks competitive positioning, market share discussions, and differentiation strategies.

Each agent processes transcripts through specialized prompts, producing structured insights that feed into the overall analysis.

#### `Agent` base class for specialised agents
"""

class Agent(ABC):
    """Base class for all specialized agents"""

    @abstractmethod
    def analyze(self, transcript: str, quarter: str) -> Any:
        """Analyze the transcript and return insights"""
        pass

"""#### Financial Agent"""

class FinancialAgent(Agent):
    """Agent for financial analysis of earnings call transcripts"""

    def analyze(self, transcript: str, quarter: str) -> List[FinancialInsight]:
        """Extract financial insights from transcript"""

        system_prompt = """
        You are a financial analyst focused on extracting key financial metrics and performance
        indicators from NVIDIA's earnings call transcripts.

        Focus on:
        - Revenue figures (overall and by segment)
        - Profit margins
        - Growth rates
        - Forward guidance
        - Capital expenditures
        - Cash flow metrics
        - Any financial KPIs mentioned

        Extract only facts that are explicitly stated in the transcript, with their proper context.

        Keep the insights as short as possible.
        """

        print(f"Running financial agent for quarter {quarter}...")

        response = client.chat.parse(
            model=STRUCTURED_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Extract financial insights from this earnings call transcript for {quarter}:\n\n{transcript}"}
            ],
            response_format=FinancialInsightsResponse,
            temperature=0.1
        )

        print(f"Running financial agent completed")

        response = json.loads(response.choices[0].message.content)

        return response['insights']

"""#### Strategic Agent"""

class StrategicAgent(Agent):
    """Agent for strategic analysis of earnings call transcripts"""

    def analyze(self, transcript: str, quarter: str) -> List[StrategicInsight]:
        """Extract strategic insights from transcript"""

        system_prompt = """
        You are a business strategy analyst focused on NVIDIA's strategic direction.

        Extract insights about:
        - Product roadmaps
        - Market expansions
        - Strategic partnerships
        - R&D investments
        - Long-term vision
        - Business model changes
        - Market segments of focus

        Focus on extracting concrete strategic initiatives and plans, not general statements.
        Assign an importance score (1-5) based on how central it appears to NVIDIA's strategy.
        """

        print(f"Running strategic agent for quarter {quarter}...")

        response = client.chat.parse(
            model=STRUCTURED_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Extract strategic insights from this earnings call transcript for {quarter}:\n\n{transcript}"}
            ],
            response_format=StrategicInsightsResponse,
            temperature=0.1
        )

        print(f"Running financial agent completed")

        response = json.loads(response.choices[0].message.content)

        return response['insights']

"""#### Sentiment Agent"""

class SentimentAgent(Agent):
    """Agent for sentiment analysis of earnings call transcripts"""

    def analyze(self, transcript: str, quarter: str) -> List[SentimentInsight]:
        """Extract sentiment insights from transcript"""

        system_prompt = """
        You are an expert in analyzing sentiment and tone in corporate communications.

        Focus on:
        - Management's confidence level
        - Tone when discussing different business segments
        - Enthusiasm for future prospects
        - Concerns or hesitations
        - Changes in sentiment when answering analyst questions

        Extract specific topics and the sentiment expressed about them by specific speakers.
        Use the transcript to find evidence of the sentiment you identify.
        """

        print(f"Running sentiment agent for quarter {quarter}...")

        response = client.chat.parse(
            model=STRUCTURED_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Extract sentiment insights from this earnings call transcript for {quarter}:\n\n{transcript}"}
            ],
            response_format=SentimentInsightsResponse,
            temperature=0.1
        )

        print(f"Running financial agent completed")

        response = json.loads(response.choices[0].message.content)

        return response['insights']

"""#### Risk Agent"""

class RiskAgent(Agent):
    """Agent for risk analysis of earnings call transcripts"""

    def analyze(self, transcript: str, quarter: str) -> List[RiskInsight]:
        """Extract risk insights from transcript"""

        system_prompt = """
        You are a risk analyst specialized in identifying challenges, uncertainties, and risk factors
        mentioned in NVIDIA's earnings calls.

        Focus on:
        - Supply chain challenges
        - Market uncertainties
        - Competitive pressures
        - Regulatory concerns
        - Technical challenges
        - Execution risks
        - Macroeconomic factors

        For each risk, identify its potential impact and any mentioned mitigation strategies.
        Assign a severity score (1-5) based on how serious the risk appears from the transcript.
        """

        print(f"Running risk agent for quarter {quarter}...")

        response = client.chat.parse(
            model=STRUCTURED_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Extract risk insights from this earnings call transcript for {quarter}:\n\n{transcript}"}
            ],
            response_format=RiskInsightsResponse,
            temperature=0.1
        )

        print(f"Running risk agent completed")

        response = json.loads(response.choices[0].message.content)

        return response['insights']

"""#### Competitor Agent"""

class CompetitorAgent(Agent):
    """Agent for competitive analysis of earnings call transcripts"""

    def analyze(self, transcript: str, quarter: str) -> List[CompetitorInsight]:
        """Extract competitor insights from transcript"""

        system_prompt = """
        You are a competitive intelligence analyst focused on NVIDIA's positioning relative to competitors.

        Focus on:
        - Direct mentions of competitors (AMD, Intel, etc.)
        - Market share discussions
        - Competitive advantages or disadvantages
        - Differentiation strategies
        - Responses to competitive threats
        - Emerging competition

        Extract specific insights about NVIDIA's competitive positioning in different market segments.
        Note who mentioned the competitive information (CEO, CFO, analyst, etc.)
        """

        print(f"Running competitor agent for quarter {quarter}...")

        response = client.chat.parse(
            model=STRUCTURED_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Extract competitive insights from this earnings call transcript for {quarter}:\n\n{transcript}"}
            ],
            response_format=CompetitorInsightsResponse,
            temperature=0.1
        )

        print(f"Running competitor agent completed")

        response = json.loads(response.choices[0].message.content)

        return response['insights']

"""#### Temporal Analysis Agent"""

class TemporalAnalysisAgent(Agent):
    """Agent for analyzing trends across quarters"""

    def analyze(self, all_insights: List) -> List[TemporalInsight]:
        """Analyze trends and patterns across quarters"""

        system_prompt = """
        You are a trend analyst specialized in identifying patterns, changes, and developments
        across multiple quarters of NVIDIA's earnings calls.

        Focus on:
        - Growing or declining emphasis on specific topics
        - Evolving business priorities
        - Shifts in competitive positioning
        - Changes in risk factors
        - Sentiment trends

        Identify meaningful patterns that show how NVIDIA's business is evolving over time.
        Use specific evidence from multiple quarters to support each trend you identify.
        """

        print(f"Running temporal analysis agent...")

        # Format insights for analysis
        formatted_insights = self._format_insights_for_analysis(all_insights)

        response = client.chat.parse(
            model=STRUCTURED_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Analyze these insights across quarters to identify trends and patterns:\n\n{formatted_insights}"}
            ],
            response_format=TemporalInsightsResponse,
            temperature=0.2
        )

        print(f"Running temporal analysis agent completed")

        response = json.loads(response.choices[0].message.content)

        return response['insights']

    def _format_insights_for_analysis(self, all_insights: List) -> str:
        """Format all insights for temporal analysis"""
        formatted = ""
        for quarter, insights in all_insights:
            formatted += f"\n## {quarter} Insights:\n"
            for agent_type, agent_insights in insights.items():
                formatted += f"\n### {agent_type.capitalize()} Insights:\n"
                if isinstance(agent_insights, list):
                    for insight in agent_insights:
                        formatted += f"- {insight}\n"
                else:
                    formatted += f"{agent_insights}\n"
        return formatted

"""### Workflow Orchestrator

The Workflow Orchestrator serves as the central coordination system that:

1. Takes user queries and determines analysis requirements
2. Retrieves and distributes relevant transcripts to specialized agents
3. Activates only the specific agent types needed for each query
4. Collects and consolidates insights from multiple agents and quarters
5. Initiates temporal analysis when cross-quarter trends are requested
6. Formats the consolidated insights into comprehensive responses

By selectively activating only necessary components for each query, the orchestrator balances comprehensive analysis with computational efficiency, ensuring targeted answers without unnecessary processing.
"""

import json

class WorkflowOrchestrator:
    """Main orchestrator for the workflow"""

    def __init__(self):
        self.financial_agent = FinancialAgent()
        self.strategic_agent = StrategicAgent()
        self.sentiment_agent = SentimentAgent()
        self.risk_agent = RiskAgent()
        self.competitor_agent = CompetitorAgent()
        self.temporal_agent = TemporalAnalysisAgent()

    def process_query(self, query: str) -> str:
        """Main entry point for processing user queries"""
        # 1. Analyze the query
        query_analysis = json.loads(QueryProcessor.analyze_query(query))

        print(f"Quarters selected: {query_analysis['quarters']}")

        print(f"Agents that should be used: {query_analysis['agent_types']}")

        print(f"Temporal analysis required: {query_analysis['temporal_analysis_required']}")

        print(f"Query Intent: {query_analysis['query_intent']}")

        # 2. Collect all required insights
        all_insights = []

        for quarter in query_analysis['quarters']:

            print(f"Running for quarter {quarter}")

            transcript = PDFParser.get_transcript_by_quarter(quarter)

            # 3. Run appropriate agents based on query needs
            insights_for_quarter = {}

            if "Financial" in query_analysis['agent_types']:
                print(f"Running financial agent for quarter {quarter}")
                insights_for_quarter["financial"] = self.financial_agent.analyze(transcript, quarter)

            if "Strategic" in query_analysis['agent_types']:
                insights_for_quarter["strategic"] = self.strategic_agent.analyze(transcript, quarter)

            if "Sentiment" in query_analysis['agent_types']:
                insights_for_quarter["sentiment"] = self.sentiment_agent.analyze(transcript, quarter)

            if "Risk" in query_analysis['agent_types']:
                insights_for_quarter["risk"] = self.risk_agent.analyze(transcript, quarter)

            if "Competitor" in query_analysis['agent_types']:
                insights_for_quarter["competitor"] = self.competitor_agent.analyze(transcript, quarter)

            all_insights.append((quarter, insights_for_quarter))

        # 4. Run temporal analysis if needed
        temporal_insights = None
        if query_analysis['temporal_analysis_required'] and len(query_analysis['quarters']) > 1:
            temporal_insights = self.temporal_agent.analyze(all_insights)

        # 5. Generate final response
        return self.generate_response(query, query_analysis, all_insights, temporal_insights)

    def generate_response(self, query: str, query_analysis: QueryAnalysis,
                        all_insights: List, temporal_insights: Any = None) -> str:
        """Generate final response based on all collected insights"""

        # Format insights for prompt
        insights_formatted = self._format_insights_for_prompt(all_insights)

        system_prompt = """
        You are an expert analyst of NVIDIA earnings calls.
        Provide a clear, concise response to the user's query based on the insights provided.
        Focus only on answering what was asked, using the most relevant insights.
        """

        user_prompt = f"""
        Query: {query}

        Quarters analyzed: {', '.join(query_analysis['quarters'])}

        Insights collected:
        {insights_formatted}
        """

        if temporal_insights:
            user_prompt += f"""
            Temporal insights:
            {temporal_insights}
            """

        user_prompt += f"""
        Final response:
            """

        response = client.chat.complete(
            model=DEFAULT_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.3
        )

        return response.choices[0].message.content

    def _format_insights_for_prompt(self, all_insights: List) -> str:
        """Format insights for inclusion in prompt"""
        formatted = ""
        for quarter, insights in all_insights:
            formatted += f"\n## {quarter} Insights:\n"
            for agent_type, agent_insights in insights.items():
                formatted += f"\n### {agent_type.capitalize()} Insights:\n"
                if isinstance(agent_insights, list):
                    for insight in agent_insights:
                        formatted += f"- {insight}\n"
                else:
                    formatted += f"{agent_insights}\n"
        return formatted

"""### Dataset

We demonstrate this system using NVIDIA's quarterly earnings call transcripts from 2025 (Q1-Q4), which contain financial discussions, strategic initiatives, and forward-looking statements from management.
"""

transcript_files = ["nvda_earnings_2025_Q1.pdf", "nvda_earnings_2025_Q2.pdf",
                        "nvda_earnings_2025_Q3.pdf", "nvda_earnings_2025_Q4.pdf"]

"""### Initialise the WorkflowOrchestrator"""

orchestrator = WorkflowOrchestrator()

"""### Example Queries

#### Query-1

Query - What were NVIDIA's key financial metrics in Q1 and Q2 2025?

Agents Used - Financial Agent

Quarters - Q1, Q2

Temporal Analysis Required - False

Financial Year - 2024
"""

query = "What were NVIDIA's key financial metrics in Q1 and Q2 2025?"
result = orchestrator.process_query(query)

print(result)

"""#### Query-2

Query - Compare NVIDIA's key financial metrics in Q1 and Q2 2025?

Agents Used - Financial Agent

Quarters - Q1, Q2

Temporal Analysis Required - True

Financial Year - 2025
"""

query = "Compare NVIDIA's key financial metrics in Q1 and Q2 2025?"
result = orchestrator.process_query(query)

print(result)

"""#### Query-3

Query - Identify strategic shifts in NVIDIA's automotive business across 2025

Agents Used - Strategic Agent

Quarters - Q1, Q2, Q3, Q4

Temporal Analysis Required - True

Financial Year - 2025
"""

query = "Identify strategic shifts in NVIDIA's automotive business across 2025"
result = orchestrator.process_query(query)

print(result)

"""#### Query-4

Query - How has NVIDIA's competitive positioning evolved throughout 2025?

Agents Used - Competitor Agent

Quarters - Q1, Q2, Q3, Q4

Temporal Analysis Required - True

Financial Year - 2025
"""

query = "How has NVIDIA's competitive positioning evolved throughout 2025?"
result = orchestrator.process_query(query)

print(result)

"""#### Query-5

Query - How did the management's sentiment evolve in the gaming segment from Q2 to Q3 2025?

Agents Used - Competitor Agent

Quarters - Q2, Q3

Temporal Analysis Required - True

Financial Year - 2025
"""

query = "How did the management's sentiment evolve in the gaming segment from Q2 to Q3 2025?"
result = orchestrator.process_query(query)

print(result)

"""#### Query-6

Query - What risks did NVIDIA highlight in their Q4 earnings call, and how do they compare to those mentioned in Q3?

Agents Used - Risk Agent

Quarters - Q3, Q4

Temporal Analysis Required - True

Financial Year - 2025
"""

query = "What risks did NVIDIA highlight in their Q4 earnings call, and how do they compare to those mentioned in Q3?"
result = orchestrator.process_query(query)

print(result)

